export const en = {
	common: {
		save: "Save",
		cancel: "Cancel",
		delete: "Delete",
		edit: "Edit",
		copy: "Copy",
		paste: "Paste",
		clear: "Clear",
		refresh: "Refresh",
		loading: "Loading",
		error: "Error",
		success: "Success",
		warning: "Warning",
		info: "Info",
		yes: "Yes",
		no: "No",
		ok: "OK",
		close: "Close",
		open: "Open",
		add: "Add",
		remove: "Remove",
		enable: "Enable",
		disable: "Disable",
		settings: "Settings",
		help: "Help",
		about: "About",
		version: "Version",
		search: "Search",
		filter: "Filter",
		sort: "Sort",
		connect: "Connect",
		disconnect: "Disconnect",
		connected: "Connected",
		disconnected: "Disconnected",
		install: "Install",
		installed: "Installed",
		installing: "Installing...",
		download: "Download",
		upload: "Upload",
		import: "Import",
		export: "Export",
		preview: "Preview",
		submit: "Submit",
		reset: "Reset",
		back: "Back",
		next: "Next",
		previous: "Previous",
		continue: "Continue",
		finish: "Finish",
		start: "Start",
		stop: "Stop",
		pause: "Pause",
		resume: "Resume",
		and: "and",
		retry: "Retry",
		undo: "Undo",
		redo: "Redo",
		select: "Select",
		selectAll: "Select All",
		deselectAll: "Deselect All",
		expand: "Expand",
		collapse: "Collapse",
		maximize: "Maximize",
		minimize: "Minimize",
		fullscreen: "Fullscreen",
		exitFullscreen: "Exit Fullscreen",
		copied: "Copied",
	},
	components: {
		badge: "Badge",
		checkbox: "Checkbox",
		link: "Link",
		remove: "Remove",
		matchCase: "Match Case",
		matchWholeWord: "Match Whole Word",
		useRegularExpression: "Use Regular Expression",
		account: "Account",
		done: "Done",
		currentBalance: "CURRENT BALANCE",
		termsOfService: "Terms of Service",
		privacyPolicy: "Privacy Policy",
		byContining: "By continuing, you agree to the",
		and: "and",
		createRuleFile: "Create rule file",
		newRuleFile: "New rule file",
		newWorkflowFile: "New workflow file...",
		editRuleFile: "Edit rule file",
		deleteRuleFile: "Delete rule file",
		globalRules: "Global Rules",
		workspaceRules: "Workspace Rules",
		globalWorkflows: "Global Workflows",
		workspaceWorkflows: "Workspace Workflows",
		clineRules: "Cline Rules",
		compare: "Compare",
		restore: "Restore",
		recentTasks: "Recent Tasks",
		favorited: "Favorited",
		viewAllHistory: "View all history",
		discardChanges: "Discard Changes",
		restartServer: "Restart Server",
		deleteServer: "Delete Server",
		retryConnection: "Retry Connection",
		retrying: "Retrying...",
		deleting: "Deleting...",
		restarting: "Restarting...",
		tools: "Tools",
		resources: "Resources",
		returns: "Returns ",
		requiresApiKey: "Requires API key",
		submitYourMcpServer: "Submit your MCP server",
		helpImproveCline: "Help Improve Cline",
		closeBannerEnableTelemetry: "Close banner and enable telemetry",
		clickToToggleActMode: "Click to toggle to Act Mode",
		somethingWentWrongImage: "Something went wrong displaying this image",
		somethingWentWrongLink: "Something went wrong displaying this link preview",
		startTaskToSeeHere: "Start a task to see it here",
		exportLabel: "EXPORT",
		defaultCommands: "Default Commands",
		workflowCommands: "Workflow Commands",
	},
	settings: {
		title: "Settings",
		apiConfiguration: "API Configuration",
		general: "General",
		generalSettings: "General Settings",
		feature: "Feature",
		featureSettings: "Feature Settings",
		browser: "Browser",
		browserSettings: "Browser Settings",
		terminal: "Terminal",
		terminalSettings: "Terminal Settings",
		debug: "Debug",
		debugTools: "Debug Tools",
		aboutCline: "About Cline",
		preferredLanguage: "Preferred Language",
		preferredLanguageDescription: "The language that Cline should use for communication.",
		allowAnonymousReporting: "Allow anonymous error and usage reporting",
		telemetryDescription:
			"Help improve Cline by sending anonymous usage data and error reports. No code, prompts, or personal information are ever sent. See our",
		telemetryOverview: "telemetry overview",
		privacyPolicy: "privacy policy",
		forMoreDetails: "for more details.",
		apiProvider: "API Provider",
		planMode: "Plan Mode",
		actMode: "Act Mode",
		useDifferentModels: "Use different models for Plan and Act modes",
		useDifferentModelsDescription:
			"Switching between Plan and Act mode will persist the API and model used in the previous mode. This may be helpful e.g. when using a strong reasoning model to architect a plan for a cheaper coding model to act on.",
		apiKey: "API Key",
		apiKeyRequired: "You must provide a valid API key or choose a different provider.",
		baseUrl: "Base URL",
		useCustomBaseUrl: "Use custom base URL",
		modelId: "Model ID",
		modelIdRequired: "You must provide a valid model ID.",
		modelConfiguration: "Model Configuration",
		supportsImages: "Supports Images",
		contextWindowSize: "Context Window Size",
		maxOutputTokens: "Max Output Tokens",
		maxCompletionTokens: "Max Completion Tokens",
		maxTokens: "Max Tokens",
		temperature: "Temperature",
		topP: "Top P",
		topK: "Top K",
		frequencyPenalty: "Frequency Penalty",
		presencePenalty: "Presence Penalty",
		repetitionPenalty: "Repetition Penalty",
		thinkingBudget: "Thinking Budget",
		thinkingBudgetDesc: "Maximum tokens for thinking before responding",
		terminalOutputLineLimit: "Terminal Output Line Limit",
		terminalOutputLineLimitDesc: "Maximum number of lines to show in terminal output",
		terminalConnectionTimeout: "Terminal Connection Timeout",
		terminalConnectionTimeoutDesc: "Timeout in seconds for terminal connections",
		enableTerminalReuse: "Enable Terminal Reuse",
		enableTerminalReuseDesc: "Reuse existing terminals when possible",
		browserPath: "Browser Path",
		browserPathDesc: "Path to browser executable",
		launchBrowserDebugMode: "Launch Browser with Debug Mode",
		launchingBrowser: "Launching Browser...",
		// Debug Tools
		resetWorkspaceState: "Reset Workspace State",
		resetGlobalState: "Reset Global State",
		resetStateDescription: "This will reset all global state and secret storage in the extension.",
		// About
		aboutDescription: "If you have any questions or feedback, feel free to open an issue at",
		// Browser Settings
		disableBrowserToolUsage: "Disable browser tool usage",
		disableBrowserToolDescription: "Prevent Cline from using browser actions (e.g. launch, click, type).",
		viewportSize: "Viewport size",
		viewportSizeDescription: "Set the size of the browser viewport for screenshots and interactions.",
		useRemoteBrowserConnection: "Use remote browser connection",
		chromeExecutablePath: "Chrome Executable Path (Optional)",
		chromePathDescription: "Leave blank to auto-detect.",
		checkingConnection: "Checking connection...",
		notConnected: "Not connected",
		// Terminal Settings
		defaultTerminalProfile: "Default Terminal Profile",
		defaultTerminalProfileDescription:
			"Select the default terminal Cline will use. 'Default' uses your VSCode global setting.",
		shellIntegrationTimeout: "Shell integration timeout (seconds)",
		shellIntegrationTimeoutDescription:
			"Set how long Cline waits for shell integration to activate before executing commands. Increase this value if you experience terminal connection timeouts.",
		enableAggressiveTerminalReuse: "Enable aggressive terminal reuse",
		terminalReuseDescription:
			"When enabled, Cline will reuse existing terminal windows that aren't in the current working directory. Disable this if you experience issues with task lockout after a terminal command.",
		enterPositiveNumber: "Please enter a positive number",
		// Feature Settings
		enableCheckpoints: "Enable Checkpoints",
		checkpointsDescription:
			"Enables extension to save checkpoints of workspace throughout the task. Uses git under the hood which may not work well with large workspaces.",
		enableMcpMarketplace: "Enable MCP Marketplace",
		mcpMarketplaceDescription: "Enables the MCP Marketplace tab for discovering and installing MCP servers.",
		enableRichMcpDisplay: "Enable Rich MCP Display",
		richMcpDisplayDescription:
			"Enables rich formatting for MCP responses. When disabled, responses will be shown in plain text.",
		collapseMcpResponses: "Collapse MCP Responses",
		mcpResponsesDescription: "Sets the default display mode for MCP response panels",
		openAIReasoningEffort: "OpenAI Reasoning Effort",
		openAIReasoningEffortDescription:
			"Reasoning effort for the OpenAI family of models(applies to all OpenAI model providers)",
		testBrowserConnection: "Test Browser Connection",
		browserConnectionInfo: "Browser connection info",
		enableBrowserUse: "Enable Browser Use",
		enableBrowserUseDesc: "Allow Cline to use the browser",
		disableBrowserUse: "Disable Browser Use",
		disableBrowserUseDesc: "Prevent Cline from using the browser",
		browserConnection: "Browser Connection",
		status: "Status",
		type: "Type",
		remoteHost: "Remote Host",
		connected: "Connected",
		disconnected: "Disconnected",
		remote: "Remote",
		local: "Local",
		enterTimeoutSeconds: "Enter timeout in seconds",
		customHeaders: "Custom Headers",
		headerName: "Header name",
		headerValue: "Header value",
		setAzureApiVersion: "Set Azure API version",
		model: "Model",
		reasoningEffort: "Reasoning Effort",
		high: "High",
		medium: "Medium",
		low: "Low",
		requestTimeout: "Request Timeout",
		noUsageHistory: "No usage history",
		noPaymentHistory: "No payment history",
		failedToLoadImage: "Failed to load image",
		copyCode: "Copy Code",
		clearSearch: "Clear search",
		allCategories: "All Categories",
		mostInstalls: "Most Installs",
		newest: "Newest",
		githubStars: "GitHub Stars",
		name: "Name",
		defaultSort: "Default",
		price: "Price",
		throughput: "Throughput",
		latency: "Latency",
		chinaApi: "China API",
		internationalApi: "International API",
		awsCredentials: "AWS Credentials",
		awsProfile: "AWS Profile",
		awsProfileName: "AWS Profile Name",
		awsAccessKey: "AWS Access Key",
		awsSecretKey: "AWS Secret Key",
		awsSessionToken: "AWS Session Token",
		awsRegion: "AWS Region",
		global: "global",
		custom: "Custom",
		baseInferenceModel: "Base Inference Model",
		googleCloudProjectId: "Google Cloud Project ID",
		googleCloudRegion: "Google Cloud Region",
		getApiKey: "Get API Key",
		languageModel: "Language Model",
		nebiusApiKey: "Nebius API Key",
		xaiApiKey: "X AI API Key",
		cerebrasApiKey: "Cerebras API Key",
		aiCoreClientId: "AI Core Client Id",
		aiCoreClientSecret: "AI Core Client Secret",
		aiCoreBaseUrl: "AI Core Base URL",
		aiCoreAuthUrl: "AI Core Auth URL",
		aiCoreResourceGroup: "AI Core Resource Group",
		maxContextTokens: "Max Context Tokens",
		maxCompletionTokensShort: "Max Completion Tokens",
		modelContextWindow: "Model Context Window",
		alibabaApiLine: "Alibaba API Line",
		qwenApiKey: "Qwen API Key",
		doubaoApiKey: "Doubao API Key",
		geminiApiKey: "Gemini API Key",
		mistralApiKey: "Mistral API Key",
		deepSeekApiKey: "DeepSeek API Key",
		openRouterApiKey: "OpenRouter API Key",
		anthropicApiKey: "Anthropic API Key",
		openaiApiKey: "OpenAI API Key",
		togetherApiKey: "Together API Key",
		fireworksApiKey: "Fireworks API Key",
		requestyApiKey: "API Key",
		sambanovaApiKey: "SambaNova API Key",
		askSageApiKey: "AskSage API Key",
		askSageApiUrl: "AskSage API URL",
	},

	chat: {
		newTask: "New Task",
		taskHistory: "Task History",
		clearHistory: "Clear History",
		sendMessage: "Send Message",
		addContext: "Add Context",
		attachFiles: "Attach Files",
		attachImages: "Attach Images",
		planMode: "Plan Mode",
		actMode: "Act Mode",
		planModeDesc: "In Plan mode, Cline will gather information to architect a plan",
		actModeDesc: "In Act mode, Cline will complete the task immediately",
		copyTask: "Copy Task",
		deleteTask: "Delete Task",
		exportTask: "Export Task",
		favoriteTask: "Favorite Task",
		unfavoriteTask: "Unfavorite Task",
		taskCompleted: "Task Completed",
		taskFailed: "Task Failed",
		taskCancelled: "Task Cancelled",
		thisWasHelpful: "This was helpful",
		reportBug: "Report a bug",
		whatHappened: "What Happened?",
		stepsToReproduce: "Steps to Reproduce",
		relevantApiOutput: "Relevant API Request Output",
		providerModel: "Provider/Model",
		operatingSystem: "Operating System",
		systemInfo: "System Info",
		approve: "approve",
		reject: "reject",
		retrying: "retrying",
		saving: "saving",
		loading: "loading",
		clineVersion: "Cline Version",
		additionalContext: "Additional Context",
		richDisplay: "Rich Display",
		plainText: "Plain Text",
		taskMessage: "Task Message",
		userMessage: "User Message",
		fileOutsideWorkspace: "This file is outside of your workspace",
		urlExternal: "This URL is external",
		outsideWorkspace: "This is outside of your workspace",
		task: "Task",
		closeTask: "Close task",
		openDiskTaskHistory: "Open Disk Task History",
		quoteSelection: "Quote selection",
		quoteSelectionReply: "Quote selection in reply",
		dismissQuote: "Dismiss quote",
		mcpServers: "MCP Servers",
		manageMcpServers: "Manage MCP Servers",
		commandOutput: "Command Output",
		diffEditMismatch: "Diff Edit Mismatch",
		browserSessionStarted: "Browser Session Started",
		consoleLogs: "Console Logs",
		userEdits: "User Edits",
		restoreAll: "Restore All",
		restoreChat: "Restore Chat",
		restoreAllDesc: "Restore both the chat and workspace files to this checkpoint and send your edited message",
		restoreChatDesc: "Restore just the chat to this checkpoint and send your edited message",
		noMatchingCommands: "No matching commands found",
		problems: "Problems",
		terminal: "Terminal",
		pasteUrlFetch: "Paste URL to fetch contents",
		noResultsFound: "No results found",
		gitCommits: "Git Commits",
		textArea: "Text Area",
		previousUpdates: "Previous Updates",
		apiRequest: "API Request",
		apiRequestCancelled: "API Request Cancelled",
		apiStreamingFailed: "API Streaming Failed",
		apiRequestFailed: "API Request Failed",
		error: "Error",
		maxRequestsReached: "Maximum Requests Reached",
	},
	autoApprove: {
		autoApprove: "Auto-approve Settings",
		actions: "Actions",
		settings: "Quick Settings",
		autoApproveLabel: "Enable auto-approve",
		autoApproveShort: "Enabled",
		autoApproveDesc: "Toggle the auto-approve feature on or off.",
		toggleAllLabel: "Toggle all",
		toggleAllShort: "All",
		toggleAllDesc: "Toggle all actions on or off.",
		readProjLabel: "Read project files",
		readProjShort: "Read",
		readProjDesc: "Allows Cline to read files within your workspace.",
		readAllLabel: "Read all files",
		readAllShort: "Read (all)",
		readAllDesc: "Allows Cline to read any file on your computer.",
		editProjLabel: "Edit project files",
		editProjShort: "Edit",
		editProjDesc: "Allows Cline to modify files within your workspace.",
		editAllLabel: "Edit all files",
		editAllShort: "Edit (all)",
		editAllDesc: "Allows Cline to modify any file on your computer.",
		execSafeLabel: "Execute safe commands",
		execSafeShort: "Safe Cmds",
		execSafeDesc:
			"Allows Cline to execute safe terminal commands. If the model determines a command is potentially destructive, it will still require approval.",
		execAllLabel: "Execute all commands",
		execAllShort: "All Cmds",
		execAllDesc: "Allows Cline to execute all terminal commands. Use at your own risk.",
		useBrowserLabel: "Use the browser",
		useBrowserShort: "Browser",
		useBrowserDesc: "Allows Cline to launch and interact with any website in a browser.",
		useMcpLabel: "Use MCP servers",
		useMcpDesc: "Allows Cline to use configured MCP servers which may modify filesystem or interact with APIs.",
		noteLabel: "Enable notifications",
		noteShort: "Notifications",
		noteDesc: "Receive system notifications when Cline requires approval to proceed or when a task is completed.",
		maxReq: "Max Requests",
		maxReqDesc: "Cline will automatically make this many API requests before asking for approval to proceed with the task.",
	},
	mcp: {
		title: "MCP Servers",
		marketplace: "Marketplace",
		installed: "Installed",
		addServer: "Add Server",
		localServer: "Local Server",
		remoteServer: "Remote Server",
		serverName: "Server Name",
		serverCommand: "Server Command",
		serverArgs: "Server Arguments",
		serverEnv: "Server Environment",
		serverTimeout: "Server Timeout",
		enableServer: "Enable Server",
		disableServer: "Disable Server",
		restartServer: "Restart Server",
		deleteServer: "Delete Server",
		downloadCount: "Download Count",
		githubStars: "GitHub Stars",
		requiresApiKey: "Requires API key",
		noServersInstalled: "No servers installed",
		installFromGithub: "Install from GitHub",
		submitServer: "Submit your MCP server",
		refreshMarketplace: "Refresh Marketplace",
	},
	welcome: {
		title: "Welcome to Cline",
		subtitle: "Your AI coding assistant",
		quickWins: "Quick Wins",
		suggestedTasks: "Suggested Tasks",
		buildWebApp: "Build a Web App",
		buildWebAppDesc: "Create a modern web application with React and TypeScript",
		craftCliTool: "Craft a CLI Tool",
		craftCliToolDesc: "Build a command-line interface tool with Node.js",
		developGame: "Develop a Game",
		developGameDesc: "Create an interactive game using web technologies",
		getStarted: "Get Started",
		learnMore: "Learn More",
		hi: "Hi, I'm Cline",
		start: "Get Started for Free",
		your: "Use your own API key",
		go: "Let's go!",
	},
	history: {
		title: "Task History",
		noTasks: "No tasks found",
		deleteAllTasks: "Delete All Tasks",
		deleteNonFavorited: "Delete Non-Favorited",
		totalTasks: "Total Tasks",
		totalSize: "Total Size",
		searchTasks: "Search tasks...",
		filterByDate: "Filter by date",
		sortBy: "Sort by",
		sortByDate: "Date",
		sortByName: "Name",
		sortBySize: "Size",
		ascending: "Ascending",
		descending: "Descending",
	},

	checkpoints: {
		title: "Checkpoints",
		compare: "Compare",
		restore: "Restore",
		restoreWorkspace: "Restore Workspace Only",
		restoreTaskAndWorkspace: "Restore Task and Workspace",
		noCheckpoints: "No checkpoints available",
		checkpointCreated: "Checkpoint created",
		checkpointRestored: "Checkpoint restored",
		workspaceRestored: "Workspace restored",
	},

	errors: {
		somethingWentWrong: "Something went wrong displaying this content",
		unknownError: "Unknown error",
		failedToLoadImage: "Failed to load image to check dimensions.",
		failedToParseData: "Failed to parse data",
		failedToUpdateSettings: "Failed to update settings",
		failedToConnect: "Failed to connect",
		failedToDisconnect: "Failed to disconnect",
		failedToInstall: "Failed to install",
		failedToUninstall: "Failed to uninstall",
		failedToStart: "Failed to start",
		failedToStop: "Failed to stop",
		failedToRestart: "Failed to restart",
		failedToDelete: "Failed to delete",
		failedToSave: "Failed to save",
		failedToLoad: "Failed to load",
		failedToRefresh: "Failed to refresh",
		invalidInput: "Invalid input",
		requiredField: "This field is required",
		invalidEmail: "Invalid email address",
		invalidUrl: "Invalid URL",
		invalidNumber: "Invalid number",
		numberTooSmall: "Number is too small",
		numberTooLarge: "Number is too large",
		fileTooLarge: "File is too large",
		fileTypeNotSupported: "File type not supported",
		networkError: "Network error",
		timeoutError: "Request timed out",
		authenticationError: "Authentication error",
		authorizationError: "Authorization error",
		notFoundError: "Not found",
		serverError: "Server error",
		clientError: "Client error",
	},

	tooltips: {
		clickToToggleActMode: "Click to toggle to Act Mode",
		copyCode: "Copy code",
		copyTask: "Copy task",
		deleteTask: "Delete task",
		favoriteTask: "Favorite task",
		unfavoriteTask: "Unfavorite task",
		exportTask: "Export task",
		openInNewTab: "Open in new tab",
		openInBrowser: "Open in browser",
		refreshPage: "Refresh page",
		goBack: "Go back",
		goForward: "Go forward",
		zoomIn: "Zoom in",
		zoomOut: "Zoom out",
		resetZoom: "Reset zoom",
		toggleFullscreen: "Toggle fullscreen",
		showPassword: "Show password",
		hidePassword: "Hide password",
		clearSearch: "Clear search",
		sortAscending: "Sort ascending",
		sortDescending: "Sort descending",
		filterResults: "Filter results",
		showMore: "Show more",
		showLess: "Show less",
		expandAll: "Expand all",
		collapseAll: "Collapse all",
	},

	validation: {
		apiKeyRequired: "You must provide a valid API key or choose a different provider.",
		regionRequired: "You must choose a region to use with AWS Bedrock.",
		projectIdRequired: "You must provide a valid Google Cloud Project ID and Region.",
		baseUrlRequired: "You must provide a valid base URL, API key, and model ID.",
		modelIdRequired: "You must provide a valid model ID.",
		modelSelectorRequired: "You must provide a valid model selector.",
		clientIdRequired: "You must provide a valid Client Id or choose a different provider.",
		clientSecretRequired: "You must provide a valid Client Secret or choose a different provider.",
		authUrlRequired: "You must provide a valid Auth URL or choose a different provider.",
		modelNotAvailable: "The model ID you provided is not available. Please choose a different model.",
		positiveNumberRequired: "Please enter a positive number",
	},
}

export default en
